{
  "version": 3,
  "sources": ["../../../app/routes/admin.branding.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/admin.branding.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/admin.branding.tsx\");\n  import.meta.hot.lastModified = \"1755762071971.8945\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData, Form, useActionData } from \"@remix-run/react\";\nimport { getOptionalSession } from \"~/lib/session.server\";\nimport { Page, Layout, Card, FormLayout, TextField, Button, Banner, Text, Divider, InlineStack } from \"@shopify/polaris\";\nimport { useState, useCallback } from \"react\";\nexport async function loader({\n  request\n}) {\n  // Try session token first (for embedded admin)\n  const sessionContext = await getOptionalSession(request);\n  let shop;\n  if (sessionContext) {\n    shop = sessionContext.shop;\n  } else {\n    // Fallback to query parameter (for development/testing)\n    const shopParam = new URL(request.url).searchParams.get(\"shop\");\n    if (!shopParam) {\n      throw new Response(\"Unauthorized - Missing session token or shop parameter\", {\n        status: 401\n      });\n    }\n    shop = shopParam;\n  }\n\n  // Load branding settings from config API\n  try {\n    const configUrl = new URL(\"/api/config\", request.url);\n    configUrl.searchParams.set(\"shop\", shop);\n    const configResponse = await fetch(configUrl.toString());\n    const configData = await configResponse.json();\n    if (!configResponse.ok) {\n      throw new Error(configData.error || \"Failed to load config\");\n    }\n    return json({\n      shop,\n      brandingSettings: configData.branding\n    });\n  } catch (error) {\n    console.error(\"Failed to load branding settings:\", error);\n\n    // Fallback to defaults\n    const brandingSettings = {\n      brandName: shop.split('.')[0],\n      primaryColor: \"#007C3B\",\n      logoUrl: \"\",\n      tagline: \"Your mobile shopping experience\"\n    };\n    return json({\n      shop,\n      brandingSettings\n    });\n  }\n}\nexport async function action({\n  request\n}) {\n  // Try session token first (for embedded admin)\n  const sessionContext = await getOptionalSession(request);\n  let shop;\n  if (sessionContext) {\n    shop = sessionContext.shop;\n  } else {\n    // Fallback to query parameter (for development/testing)\n    const shopParam = new URL(request.url).searchParams.get(\"shop\");\n    if (!shopParam) {\n      throw new Response(\"Unauthorized - Missing session token or shop parameter\", {\n        status: 401\n      });\n    }\n    shop = shopParam;\n  }\n  try {\n    // Forward to settings API\n    const settingsUrl = new URL(\"/api/settings\", request.url);\n    settingsUrl.searchParams.set(\"shop\", shop);\n    const formData = await request.formData();\n    const settingsResponse = await fetch(settingsUrl.toString(), {\n      method: \"POST\",\n      body: formData\n    });\n    const settingsData = await settingsResponse.json();\n    if (!settingsResponse.ok) {\n      throw new Error(settingsData.error || \"Failed to save settings\");\n    }\n    return json(settingsData);\n  } catch (error) {\n    console.error(\"Failed to save branding settings:\", error);\n    return json({\n      error: error instanceof Error ? error.message : \"Failed to save settings\"\n    }, {\n      status: 500\n    });\n  }\n}\nexport default function AdminBranding() {\n  _s();\n  const {\n    shop,\n    brandingSettings\n  } = useLoaderData();\n  const actionData = useActionData();\n  const [brandName, setBrandName] = useState(brandingSettings.brandName);\n  const [primaryColor, setPrimaryColor] = useState(brandingSettings.primaryColor);\n  const [logoUrl, setLogoUrl] = useState(brandingSettings.logoUrl);\n  const [tagline, setTagline] = useState(brandingSettings.tagline);\n  const handleBrandNameChange = useCallback(value => setBrandName(value), []);\n  const handleLogoUrlChange = useCallback(value => setLogoUrl(value), []);\n  const handleTaglineChange = useCallback(value => setTagline(value), []);\n  return <Page title=\"Branding Configuration\" subtitle=\"Customize your mobile app appearance\" backAction={{\n    url: '/admin'\n  }}>\n      <Layout>\n        <Layout.Section>\n          {actionData?.success && <Banner tone=\"success\" onDismiss={() => {}}>\n              {actionData.message}\n            </Banner>}\n          {actionData?.error && <Banner tone=\"critical\" onDismiss={() => {}}>\n              {actionData.error}\n            </Banner>}\n          \n          <Card>\n            <Form method=\"post\">\n              <FormLayout>\n                <Text variant=\"headingSm\" as=\"h3\">Basic Information</Text>\n                \n                <TextField label=\"App Name\" value={brandName} onChange={handleBrandNameChange} name=\"brandName\" helpText=\"This will be the name of your mobile app\" autoComplete=\"off\" />\n\n                <TextField label=\"Tagline\" value={tagline} onChange={handleTaglineChange} name=\"tagline\" helpText=\"A short description for your mobile app\" autoComplete=\"off\" />\n\n                <Divider />\n\n                <Text variant=\"headingSm\" as=\"h3\">Visual Design</Text>\n\n                <TextField label=\"Primary Color\" value={primaryColor} onChange={setPrimaryColor} name=\"primaryColor\" helpText=\"Hex color code for your app's primary color\" autoComplete=\"off\" prefix=\"#\" placeholder=\"007C3B\" />\n\n                <TextField label=\"Logo URL\" value={logoUrl} onChange={handleLogoUrlChange} name=\"logoUrl\" helpText=\"URL to your app logo (optional)\" autoComplete=\"off\" />\n\n                <InlineStack align=\"end\">\n                  <Button variant=\"primary\" submit>\n                    Save Settings\n                  </Button>\n                </InlineStack>\n              </FormLayout>\n            </Form>\n          </Card>\n        </Layout.Section>\n\n        <Layout.Section variant=\"oneThird\">\n          <Card>\n            <div style={{\n            padding: '20px'\n          }}>\n              <Text variant=\"headingSm\" as=\"h3\">Preview</Text>\n              <div style={{\n              marginTop: '16px'\n            }}>\n                <div style={{\n                padding: '20px',\n                backgroundColor: primaryColor,\n                color: 'white',\n                borderRadius: '8px',\n                textAlign: 'center'\n              }}>\n                  <Text variant=\"headingLg\" as=\"h2\">\n                    {brandName || 'Your App Name'}\n                  </Text>\n                  <Text variant=\"bodyMd\" as=\"p\">\n                    {tagline || 'Your tagline here'}\n                  </Text>\n                </div>\n              </div>\n            </div>\n          </Card>\n        </Layout.Section>\n      </Layout>\n    </Page>;\n}\n_s(AdminBranding, \"s4vVTHiP5RDtUYa7F6rc9vXnvVM=\", false, function () {\n  return [useLoaderData, useActionData];\n});\n_c = AdminBranding;\nvar _c;\n$RefreshReg$(_c, \"AdminBranding\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
